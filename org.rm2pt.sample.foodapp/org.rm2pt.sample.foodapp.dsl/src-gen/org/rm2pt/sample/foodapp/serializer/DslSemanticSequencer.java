/*
 * generated by Xtext 2.25.0
 */
package org.rm2pt.sample.foodapp.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.rm2pt.sample.foodapp.metamodel.foodapp.Customer;
import org.rm2pt.sample.foodapp.metamodel.foodapp.CustomerService;
import org.rm2pt.sample.foodapp.metamodel.foodapp.DeliveryDriver;
import org.rm2pt.sample.foodapp.metamodel.foodapp.FoodappPackage;
import org.rm2pt.sample.foodapp.metamodel.foodapp.RestaurantManager;
import org.rm2pt.sample.foodapp.metamodel.foodapp.UserBase;
import org.rm2pt.sample.foodapp.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FoodappPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FoodappPackage.CUSTOMER:
				sequence_Customer(context, (Customer) semanticObject); 
				return; 
			case FoodappPackage.CUSTOMER_SERVICE:
				sequence_CustomerService(context, (CustomerService) semanticObject); 
				return; 
			case FoodappPackage.DELIVERY_DRIVER:
				sequence_DeliveryDriver(context, (DeliveryDriver) semanticObject); 
				return; 
			case FoodappPackage.RESTAURANT_MANAGER:
				sequence_RestaurantManager(context, (RestaurantManager) semanticObject); 
				return; 
			case FoodappPackage.USER_BASE:
				sequence_UserBase(context, (UserBase) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     User returns CustomerService
	 *     CustomerService returns CustomerService
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         username=EString? 
	 *         password=EString? 
	 *         id=EInt? 
	 *         phoneNumber=EString? 
	 *         restaurantmanager=[RestaurantManager|EString]? 
	 *         deliverydriver=[DeliveryDriver|EString]? 
	 *         customer=[Customer|EString]?
	 *     )
	 */
	protected void sequence_CustomerService(ISerializationContext context, CustomerService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     User returns Customer
	 *     Customer returns Customer
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         username=EString? 
	 *         password=EString? 
	 *         id=EInt? 
	 *         phoneNumber=EString? 
	 *         address=EString? 
	 *         email=EString? 
	 *         customerservice=[CustomerService|EString]? 
	 *         deliverydriver=[DeliveryDriver|EString]?
	 *     )
	 */
	protected void sequence_Customer(ISerializationContext context, Customer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     User returns DeliveryDriver
	 *     DeliveryDriver returns DeliveryDriver
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         username=EString? 
	 *         password=EString? 
	 *         id=EInt? 
	 *         phoneNumber=EString? 
	 *         vehicleNumber=EString? 
	 *         vehicleType=EString? 
	 *         customerservice=[CustomerService|EString]? 
	 *         customer=[Customer|EString]?
	 *     )
	 */
	protected void sequence_DeliveryDriver(ISerializationContext context, DeliveryDriver semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     User returns RestaurantManager
	 *     RestaurantManager returns RestaurantManager
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         username=EString? 
	 *         password=EString? 
	 *         id=EInt? 
	 *         phoneNumber=EString? 
	 *         address=EString? 
	 *         cuisine=EString? 
	 *         customerservice=[CustomerService|EString]?
	 *     )
	 */
	protected void sequence_RestaurantManager(ISerializationContext context, RestaurantManager semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UserBase returns UserBase
	 *
	 * Constraint:
	 *     (users+=User users+=User*)?
	 */
	protected void sequence_UserBase(ISerializationContext context, UserBase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
